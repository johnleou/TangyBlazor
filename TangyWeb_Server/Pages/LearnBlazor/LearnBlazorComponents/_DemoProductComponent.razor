<div class="bg-light border m-2 col-5" @onclick="(args)=>ProductNameChange(args, Product.Name)">
    <h4 class="text-secondary">Product - @Product.Id</h4>
    Add to Favourites : <input type="checkbox" @onchange="FavoriteUpdated"><br /><br />        
    Name - @Product.Name<br />
    <p>RF from Parent - @FirstFragment @SecondFragment</p>
    Show Properties : <input type="checkbox" @bind-value="Product.IsActive" checked="@(Product.IsActive?"checked":null)"><br />
    @if (Product.IsActive)
    {
        @foreach (var prodProp in Product.ProductProperties)
        {
            <p>@prodProp.Key - @prodProp.Value</p>
        }
    }
    <_EditDeleteButton IsActive=@Product.IsActive>
    </_EditDeleteButton>
</div>

@code {

    [Parameter]
    public Demo_Products? Product { get; set; }

    [Parameter]
    public EventCallback<bool> OnFavoriteUpdated { get; set; }

    [Parameter]
    public EventCallback<string> OnProductName { get; set; }

    [Parameter]
    public RenderFragment? FirstFragment { get; set; }

    [Parameter]
    public RenderFragment? SecondFragment { get; set; }

    private async Task FavoriteUpdated(ChangeEventArgs e)
    {        
        await OnFavoriteUpdated.InvokeAsync((bool)e.Value);
    }

    private async Task ProductNameChange(MouseEventArgs e, string name)
    {        
        await OnProductName.InvokeAsync(name);  
    }
}
